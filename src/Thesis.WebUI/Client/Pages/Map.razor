@page "/map"

@inject IJSRuntime jSRuntime
@inject HttpClient Http
<style>
    .mapboxgl-map {
        position: absolute;
        top: 0;
        bottom: 0;
        height: 100%;
        width: 100%;
    }

    .map_box_container {
        position: relative;
        height: 100%;
        min-height: 100px;
    }

    .mapboxgl-canvas {
        left: 0;
    }
</style>
<section class="map_box_container">
    <div id="map" class="mapboxgl-map"></div>
</section>
@code{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jSRuntime.InvokeVoidAsync("createMap");

            await jSRuntime.InvokeVoidAsync("mapHelper.init", DotNetObjectReference.Create(this));
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable("GetRoutes")]
    public async Task<GetRoutesVM> GetRoutes(decimal topLeftLat, decimal topLeftLon, decimal bottomRightLat, decimal bottomRightLon, decimal currentZoom)
    {
        var result = await Http.GetFromJsonAsync<GetRoutesVM>($"api/Route?TopLeftLat={topLeftLat.ToString(CultureInfo.InvariantCulture)}&TopLeftLon={topLeftLon.ToString(CultureInfo.InvariantCulture)}&BottomRightLat={bottomRightLat.ToString(CultureInfo.InvariantCulture)}&BottomRightLon={bottomRightLon.ToString(CultureInfo.InvariantCulture)}");

        return result;
    }

    [JSInvokable("GetRoutesGeoJson")]
    public async Task<GJSourceLineResult> GetRoutesGeoJson(decimal topLeftLat, decimal topLeftLon, decimal bottomRightLat, decimal bottomRightLon, decimal currentZoom)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, $"api/Route?TopLeftLat={topLeftLat.ToString(CultureInfo.InvariantCulture)}&TopLeftLon={topLeftLon.ToString(CultureInfo.InvariantCulture)}&BottomRightLat={bottomRightLat.ToString(CultureInfo.InvariantCulture)}&BottomRightLon={bottomRightLon.ToString(CultureInfo.InvariantCulture)}");
        request.Headers.Add("Format", "GeoJson");

        var httpResponse = await Http.SendAsync(request);

        var result = await httpResponse.Content.ReadFromJsonAsync<GJSourceLineResult>();

        return result;
    }

    [JSInvokable("GetRoutesGeoJsonQuick")]
    public async Task<GJSourceLineResultVM> GetRoutesGeoJsonQuick(decimal topLeftLat, decimal topLeftLon, decimal bottomRightLat, decimal bottomRightLon, decimal currentZoom)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, $"api/Route?TopLeftLat={topLeftLat.ToString(CultureInfo.InvariantCulture)}&TopLeftLon={topLeftLon.ToString(CultureInfo.InvariantCulture)}&BottomRightLat={bottomRightLat.ToString(CultureInfo.InvariantCulture)}&BottomRightLon={bottomRightLon.ToString(CultureInfo.InvariantCulture)}");
        request.Headers.Add("Format", "GeoJsonQuick");

        var httpResponse = await Http.SendAsync(request);

        var result = await httpResponse.Content.ReadFromJsonAsync<GJSourceLineResultVM>();

        return result;
    }
}
