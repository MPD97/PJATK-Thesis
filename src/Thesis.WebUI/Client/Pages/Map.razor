@page "/map"
@using Thesis.Application.Common.Routes.Queries
@using System.Net.Http

@inject IJSRuntime jSRuntime
@inject HttpClient Http
<style>
    .mapboxgl-map {
        position: absolute;
        top: 0;
        bottom: 0;
        height: 100%;
        width: 100%;
    }

    .map_box_container {
        position: relative;
        height: 100%;
        min-height: 100px;
    }

    .mapboxgl-canvas {
        left: 0;
    }
</style>
<section class="map_box_container">
    <div id="map" class="mapboxgl-map"></div>
</section>
@code{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jSRuntime.InvokeVoidAsync("initMap");

            jSRuntime.InvokeVoidAsync("scroll.init", DotNetObjectReference.Create(this));
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable("GetRoutes")]
    public async Task<GetRoutesVM> GetRoutes(decimal topLeftLat, decimal topLeftLon, decimal bottomRightLat, decimal bottomRightLon, decimal currentZoom)
    {
        var result = await Http.GetFromJsonAsync<GetRoutesVM>($"api/Route?TopLeftLat={topLeftLat}&TopLeftLon={topLeftLon}&BottomRightLat={bottomRightLat}&BottomRightLon={bottomRightLon}");

        return result;
    }
}
